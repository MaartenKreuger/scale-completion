#
# Spectrum Scale v5.0 bash completion scripts
# Author: Maarten Kreuger (maarten_kreuger@nl.ibm.com)
# Download from github: github.com/scale-completion
# Available using MIT License
# Copyright IBM 2020
#

_mmcrfs_completion()
{
  COMPREPLY=()
  case "${#COMP_WORDS[@]}" in
    2) COMPREPLY=($(compgen -W "fs1" -- "${COMP_WORDS[1]}"));;
    *) case "${COMP_WORDS[COMP_CWORD-1]}" in
       -F) COMPREPLY=($(compgen -f -o filenames -- "${COMP_WORDS[COMP_CWORD]}"));;
       -A) COMPREPLY=($(compgen -W "yes no automount" -- "${COMP_WORDS[COMP_CWORD]}"));;
       -B) COMPREPLY=($(compgen -W "1M 4M 8M" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -D) COMPREPLY=($(compgen -W "posix nfs4" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -E) COMPREPLY=($(compgen -W "yes no" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -i) COMPREPLY=($(compgen -W "512 1024 4096" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -j) COMPREPLY=($(compgen -W "cluster scatter" -- "${COMP_WORDS[COMP_CWORD]}"));;
       -k) COMPREPLY=($(compgen -W "posix nfs4 all" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -K) COMPREPLY=($(compgen -W "no whenpossible always" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -L) COMPREPLY=($(compgen -W "32M" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -m) COMPREPLY=($(compgen -W "1 2 3" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -M) COMPREPLY=($(compgen -W "1 2 3" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -p) COMPREPLY=($(compgen -W "afmTarget=disable afmTarget=nfs:// afmMode=ro afmMode=lu"  -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -r) COMPREPLY=($(compgen -W "1 2 3" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -R) COMPREPLY=($(compgen -W "1 2 3" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -n) COMPREPLY=($(compgen -W "4 8 16 32 64 256" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -Q) COMPREPLY=($(compgen -W "yes no" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -S) COMPREPLY=($(compgen -W "yes no relatime" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -T) COMPREPLY=($(compgen -d -- "/"));; 
       -t) COMPREPLY=($(compgen -W "D E F G H I J K L M N O P Q R S T U V W X Y Z" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -v) COMPREPLY=($(compgen -W "yes no" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       -z) COMPREPLY=($(compgen -W "yes no" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --inode-limit) COMPREPLY=($(compgen -W "10M:1M" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --log-replicas) COMPREPLY=($(compgen -W "1 2 3 DEFAULT" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --metadata-block-size) COMPREPLY=($(compgen -W "256K 512K 1M 4M 8M" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --version) COMPREPLY=($(compgen -W "$(_min_release_level)" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --profile) COMPREPLY=($(compgen -W "$(_show_profiles)" -- "${COMP_WORDS[COMP_CWORD]}"));; 
       --write-cache-threshold) COMPREPLY=($(compgen -W "8K 16K 32K 64K" -- "${COMP_WORDS[COMP_CWORD]}"));;
       --mount-priority) COMPREPLY=($(compgen -W "1 2 3 4 5 6 7 8 9" -- "${COMP_WORDS[COMP_CWORD]}"));;
       *) COMPREPLY=($(compgen -W '-F -A -B -D -E -i -j -k -K -L -m -M -p -n -Q -r -R -S -T -t -v -z --filesetdf --nofilesetdf --inode-limit --log-replicas --metadata-block-size --perfileset-quota --noperfileset-quota --profile --mount-priority --version --write-cache-threshold' -- "${COMP_WORDS[COMP_CWORD]}"));;
       esac;;
  esac
}
complete -F _mmcrfs_completion mmcrfs
